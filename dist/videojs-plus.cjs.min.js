'use strict';

var video_js = require('video.js');

function findChild(parent, name, result) {
  var children = [];

  if (parent && parent.childIndex_ && Object.keys(parent.childIndex_).length) {
    for (var componentId in parent.childIndex_) {
      var component = parent.childIndex_[componentId];

      if (component && component.name_ == name) {
        var _result$push;

        result.push((_result$push = {
          parent: parent,
          component: component,
          index: parent.children_.indexOf(component)
        }, _result$push[name] = component, _result$push));
      }

      children.push(findChild(component, name, result));
    }
  }

  return {
    name: name,
    parent: parent,
    children: children
  };
}

video_js.getComponent('Component').prototype.findChild = function (name) {
  var result = [];
  findChild(this, name, result);
  return result;
};

var IS_IPHONE = video_js.browser.IS_IPHONE,
    IOS_VERSION = video_js.browser.IOS_VERSION,
    TOUCH_ENABLED = video_js.browser.TOUCH_ENABLED;
video_js.hook('setup', function (vjsPlayer) {
  vjsPlayer.playsinline(vjsPlayer.options_.playsinline !== false);
  vjsPlayer.addClass('video-js');

  if (IS_IPHONE) {
    vjsPlayer.addClass('vjs-is-iphone');

    if (IOS_VERSION < 11) {
      vjsPlayer.addClass('vjs-iphone-below-11');
    }
  }

  TOUCH_ENABLED && vjsPlayer.removeClass('vjs-workinghover');
});

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var Component = video_js.getComponent('Component');
var ControlBar = video_js.getComponent('ControlBar');

var ControlSeparator =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(ControlSeparator, _Component);

  function ControlSeparator(player, options) {
    var _this;

    _this = _Component.call(this, player, options) || this;

    _this.addClass('vjs-control-separator');

    _this.addClass(options.className || '');

    return _this;
  }

  return ControlSeparator;
}(Component);

video_js.registerComponent('ControlSeparator', ControlSeparator);
video_js.hook('beforesetup', function (_, options) {
  var children = ControlBar.prototype.options_.children.slice(0);
  var index = children.indexOf('CustomControlSpacer');

  if (index > -1) {
    ControlBar.prototype.options_.children = [{
      name: 'ControlSeparator',
      className: 'top',
      children: []
    }, {
      name: 'ControlSeparator',
      className: 'middle',
      children: children.splice(0, index + 1)
    }, {
      name: 'ControlSeparator',
      className: 'bottom',
      children: children
    }];
  }

  return options;
}); // prevent control bar immediately shown

video_js.hook('setup', function (vjsPlayer) {
  var mobileView = vjsPlayer.options_.mobileView !== false;

  var matchDimension = function matchDimension(value) {
    return window.matchMedia ? window.matchMedia("(max-width: " + value + "px)").matches : window.innerWidth <= value;
  };

  if (matchDimension(480) && mobileView) {
    // Prevent control bar shown immediately after playing
    vjsPlayer.controlBar.hide();
    vjsPlayer.one('playing', function () {
      // Show control bar after `userinactive` (depends on `inactivityTimeout`) or user action
      var events = ['mouseover', 'userinactive', 'touchstart'];
      vjsPlayer.one(events, function callback() {
        vjsPlayer.off(events, callback);
        vjsPlayer.controlBar.show();
      }); // If player do not autoplay start,
      // the first click to play action cause player inactive ( maybe a bug of videojs )
      // Then clcik on the player before `inactivityTimeout`, the control bar will no shown as the player still inactive
      // So we need to make sure player is active after second click

      vjsPlayer.one('touchend', function () {
        vjsPlayer.userActive(true);
      });
    });
    vjsPlayer.addClass('vjs-mobile-view');
  }
});

var SeekBar = video_js.getComponent('SeekBar');

SeekBar.prototype.getPercent = function getPercent() {
  var time = this.player_.currentTime();
  var percent = time / this.player_.duration();
  return percent >= 1 ? 1 : percent;
};

SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
  var player = this.player_; // if (!dom.isSingleLeftClick(event) || isAdPlaying(player)) {

  if (!video_js.dom.isSingleLeftClick(event)) {
    return;
  }

  var newTime = this.calculateDistance(event) * player.duration();

  if (newTime === player.duration()) {
    newTime = newTime - 0.1;
  }

  player.currentTime(newTime);
  this.update();
};

video_js.getComponent('ControlBar').prototype.options_.children = ['PlayToggle', 'CustomControlSpacer', 'VolumePanel', 'CurrentTimeDisplay', 'TimeDivider', 'DurationDisplay', 'ProgressControl', 'CustomControlSpacer', 'SettingMenuButton', 'FullscreenToggle'];
video_js.hook('setup', function (vjsPlayer) {
  vjsPlayer.on('mouseleave', function () {
    vjsPlayer.userActive(false);
  });
  vjsPlayer.ready(function () {
    vjsPlayer.controls(vjsPlayer.options_.controls !== false);
  });
});

var Title =
/*#__PURE__*/
function (_getComponent) {
  _inheritsLoose(Title, _getComponent);

  function Title(player, options) {
    var _this;

    _this = _getComponent.call(this, player, options) || this;
    _this.title_ = options.playerOptions.title || '';

    _this.update(_this.title_);

    return _this;
  }

  var _proto = Title.prototype;

  _proto.createEl = function createEl() {
    var el = _getComponent.prototype.createEl.call(this, 'div', {
      className: 'vjs-title'
    });

    this.contentEl_ = video_js.dom.createEl('div', {
      className: 'vjs-title-field'
    });
    el.appendChild(this.contentEl_);
    return el;
  };

  _proto.update = function update(title_) {
    if (!title_) {
      this.hide();
    } else {
      this.show();
    }

    this.player_.cache_.title = this.title_;
    this.title_ = title_;
    this.contentEl_.innerHTML = title_;
  };

  return Title;
}(video_js.getComponent('Component'));

var title = function title(title_) {
  var videoTitle = this.player_.getChild('VideoTitle');

  if (typeof title_ === 'undefined') {
    return videoTitle.title_;
  }

  videoTitle.update(title_);
};

video_js.registerPlugin('title', title);
video_js.registerComponent('VideoTitle', Title);
video_js.getComponent('Player').prototype.options_.children.splice(2, 0, 'VideoTitle');

var PlayToggleButton = video_js.getComponent('PlayToggle');
var ClickableComponent = video_js.getComponent('ClickableComponent');

var PlayToggleLayer =
/*#__PURE__*/
function (_ClickableComponent) {
  _inheritsLoose(PlayToggleLayer, _ClickableComponent);

  function PlayToggleLayer(player, options) {
    return _ClickableComponent.call(this, player, options) || this; // this.on("click", this.handleClick.bind(this));
  }

  var _proto = PlayToggleLayer.prototype;

  _proto.createEl = function createEl() {
    return video_js.dom.createEl('div', {
      className: 'vjs-play-toggle-layer'
    });
  };

  _proto.handleClick = function handleClick(evt) {
    if (this.player_.userActive() || this.player_.paused()) {
      PlayToggleButton.prototype.handleClick.call(this, evt);
    }
  };

  return PlayToggleLayer;
}(ClickableComponent);

video_js.registerComponent('PlayToggleLayer', PlayToggleLayer);
var playerChildren = video_js.getComponent('Player').prototype.options_.children;
var loadSpinnerIndex = playerChildren.indexOf('loadingSpinner');
playerChildren.splice(loadSpinnerIndex, 0, 'PlayToggleLayer');

var MenuItem = video_js.getComponent('MenuItem');

var ContextMenuItem =
/*#__PURE__*/
function (_MenuItem) {
  _inheritsLoose(ContextMenuItem, _MenuItem);

  function ContextMenuItem(player, options) {
    var _this;

    _this = _MenuItem.call(this, player, _extends({}, options, {
      selectable: true
    })) || this;

    _this.addClass('vjs-context-menu-item');

    _this.controlText(options.label);

    return _this;
  }

  var _proto = ContextMenuItem.prototype;

  _proto.createEl = function createEl() {
    var _MenuItem$prototype$c;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var el = (_MenuItem$prototype$c = _MenuItem.prototype.createEl).call.apply(_MenuItem$prototype$c, [this].concat(args));

    el.insertAdjacentHTML('afterbegin', "<span aria-hidden=\"true\" class=\"vjs-icon-placeholder " + (this.options_.icon || '') + "\"></span>");
    return el;
  };

  _proto.handleClick = function handleClick() {
    var ContextMenu = this.player_.findChild('ContextMenu')[0].component;
    ContextMenu.hide();
  };

  return ContextMenuItem;
}(MenuItem);

video_js.registerComponent('ContextMenuItem', ContextMenuItem);

var ContextMenuToggleLoop =
/*#__PURE__*/
function (_ContextMenuItem) {
  _inheritsLoose(ContextMenuToggleLoop, _ContextMenuItem);

  function ContextMenuToggleLoop(player) {
    var _this;

    _this = _ContextMenuItem.call(this, player, {
      name: 'ContextMenuToggleLoop',
      label: 'Loop',
      icon: 'vjs-icon-loop'
    }) || this;

    _this.addClass('vjs-checkbox');

    player.on('loadstart', _this.update.bind(_assertThisInitialized(_assertThisInitialized(_this))));
    return _this;
  }

  var _proto = ContextMenuToggleLoop.prototype;

  _proto.update = function update() {
    this.selected(this.player_.loop());
  };

  _proto.handleClick = function handleClick() {
    _ContextMenuItem.prototype.handleClick.call(this);

    this.player_.loop(!this.player_.loop());
    this.update();
  };

  return ContextMenuToggleLoop;
}(ContextMenuItem);

video_js.registerComponent('ContextMenuToggleLoop', ContextMenuToggleLoop);

var AboutThisPlayer =
/*#__PURE__*/
function (_ContextMenuItem) {
  _inheritsLoose(AboutThisPlayer, _ContextMenuItem);

  function AboutThisPlayer(player) {
    return _ContextMenuItem.call(this, player, {
      name: 'AboutThisPlayer',
      label: 'About This Player',
      icon: 'vjs-icon-github'
    }) || this;
  }

  var _proto = AboutThisPlayer.prototype;

  _proto.handleClick = function handleClick() {
    _ContextMenuItem.prototype.handleClick.call(this);

    window.open('https://github.com/Pong420/videojs-plus', '_blank');
  };

  return AboutThisPlayer;
}(ContextMenuItem);

video_js.registerComponent('AboutThisPlayer', AboutThisPlayer);

var ClickableComponent$1 = video_js.getComponent('ClickableComponent');

var CloseContextMenu =
/*#__PURE__*/
function (_ClickableComponent) {
  _inheritsLoose(CloseContextMenu, _ClickableComponent);

  function CloseContextMenu() {
    return _ClickableComponent.apply(this, arguments) || this;
  }

  var _proto = CloseContextMenu.prototype;

  _proto.buildCSSClass = function buildCSSClass() {
    return 'vjs-close-menu-layer vjs-close-context-menu';
  };

  _proto.handleClick = function handleClick() {
    this.options_.menu.hide();
  };

  return CloseContextMenu;
}(ClickableComponent$1);

video_js.registerComponent('CloseContextMenu', CloseContextMenu);

var Menu = video_js.getComponent('Menu');

var ContextMenu =
/*#__PURE__*/
function (_Menu) {
  _inheritsLoose(ContextMenu, _Menu);

  function ContextMenu(player, options) {
    var _this;

    _this = _Menu.call(this, player, options) || this;

    _this.addClass('vjs-context-menu');

    _this.hide();

    _this.player_.on('contextmenu', _this.onContextmenu.bind(_assertThisInitialized(_assertThisInitialized(_this))));

    var handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));

    window.addEventListener('click', handleClick);

    _this.on('dispose', function () {
      window.removeEventListener('click', handleClick);
    });

    return _this;
  }

  var _proto = ContextMenu.prototype;

  _proto.createEl = function createEl() {
    var _Menu$prototype$creat;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var el = (_Menu$prototype$creat = _Menu.prototype.createEl).call.apply(_Menu$prototype$creat, [this].concat(args));

    var layer = new CloseContextMenu(this.player_, {
      menu: this
    });
    el.insertBefore(layer.el_, el.firstElementChild);
    return el;
  };

  _proto.show = function show(x, y) {
    _Menu.prototype.show.call(this);

    this.el_.style.top = y + 'px';
    this.el_.style.left = x + 'px';
  };

  _proto.onContextmenu = function onContextmenu(evt) {
    evt.preventDefault();
    var rect = this.player_.el().getBoundingClientRect();
    var x = evt.pageX - rect.x;
    var y = evt.pageY - rect.y;
    this.show(x, y);
  };

  _proto.handleClick = function handleClick(evt) {
    if (evt.button || evt.button === 0) {
      if (evt.button !== 2) {
        this.hide();
      }
    }
  };

  return ContextMenu;
}(Menu);

ContextMenu.prototype.options_ = {
  children: ['ContextMenuToggleLoop', 'AboutThisPlayer']
};
video_js.registerComponent('ContextMenu', ContextMenu);
video_js.getComponent('Player').prototype.options_.children.push('ContextMenu');

var ClickableComponent$2 = video_js.getComponent('ClickableComponent');

var CloseSettingMenu =
/*#__PURE__*/
function (_ClickableComponent) {
  _inheritsLoose(CloseSettingMenu, _ClickableComponent);

  function CloseSettingMenu() {
    return _ClickableComponent.apply(this, arguments) || this;
  }

  var _proto = CloseSettingMenu.prototype;

  _proto.buildCSSClass = function buildCSSClass() {
    return 'vjs-close-menu-layer vjs-close-setting-menu';
  };

  _proto.handleClick = function handleClick() {
    this.options_.menu.menuButton_.hideMenu();
  };

  return CloseSettingMenu;
}(ClickableComponent$2);

video_js.registerComponent('CloseSettingMenu', CloseSettingMenu);

var Menu$1 = video_js.getComponent('Menu');

var SettingMenu =
/*#__PURE__*/
function (_Menu) {
  _inheritsLoose(SettingMenu, _Menu);

  function SettingMenu(player, options) {
    var _this;

    _this = _Menu.call(this, player, _extends({}, options, {
      name: 'SettingMenu'
    })) || this;

    _this.addClass('vjs-setting-menu');

    setTimeout(_this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this))), 0);
    return _this;
  }

  var _proto = SettingMenu.prototype;

  _proto.reset = function reset() {
    if (!this.contentEl_) {
      return;
    }

    this.removeStyle();
    var _this$contentEl_ = this.contentEl_,
        width = _this$contentEl_.offsetWidth,
        height = _this$contentEl_.offsetHeight;
    this.origin = {
      children: this.children().slice(0),
      width: width,
      height: height
    };
    this.resize({
      width: width,
      height: height
    });
    /**
     *  Since the width of setting menu depends on screen width.
     *  If player is initialized on small screen size then resize to a bigger screen,
     *  the width of setting menu will be too wide as the origin width is affected by css,
     *  A class `vjs-setting-menu-ready` as a condition for css on small screen,
     *  therefore the origin width will not be affected.
     */

    this.addClass('vjs-setting-menu-ready');
  };

  _proto.createEl = function createEl() {
    var el = _Menu.prototype.createEl.call(this);

    var layer = new CloseSettingMenu(this.player_, {
      menu: this
    });
    el.insertBefore(layer.el_, el.firstElementChild);
    return el;
  };

  _proto.update = function update(children) {
    var _this2 = this;

    if (children === void 0) {
      children = [];
    }

    var children_ = this.children().slice(0);
    children_.forEach(function (child) {
      _this2.removeChild(child);
    });
    children.forEach(function (child) {
      _this2.addChild(child);
    });
  };

  _proto.resize = function resize(_ref) {
    var width = _ref.width,
        height = _ref.height;
    this.contentEl_.style.width = width + 'px';
    this.contentEl_.style.height = height + 'px';
  };

  _proto.restore = function restore() {
    this.resize(this.origin);
    this.update(this.origin.children);
  };

  _proto.removeStyle = function removeStyle() {
    this.contentEl_.removeAttribute('style');
  };

  return SettingMenu;
}(Menu$1);

video_js.registerComponent('SettingMenu', SettingMenu);

var MenuItem$1 = video_js.getComponent('MenuItem');

var SettingMenuItem =
/*#__PURE__*/
function (_MenuItem) {
  _inheritsLoose(SettingMenuItem, _MenuItem);

  function SettingMenuItem(player, options) {
    var _this;

    _this = _MenuItem.call(this, player, video_js.mergeOptions({
      selectable: false
    }, options)) || this;
    _this.menu = options.menu;
    return _this;
  }

  return SettingMenuItem;
}(MenuItem$1);

video_js.registerComponent('SettingMenuItem', SettingMenuItem);

var SettingOnOffItem =
/*#__PURE__*/
function (_SettingMenuItem) {
  _inheritsLoose(SettingOnOffItem, _SettingMenuItem);

  function SettingOnOffItem() {
    return _SettingMenuItem.apply(this, arguments) || this;
  }

  var _proto = SettingOnOffItem.prototype;

  _proto.createEl = function createEl() {
    var options = this.options_;
    var el = video_js.dom.createEl('li', {
      className: 'vjs-menu-item vjs-setting-onoff-item',
      innerHTML: "\n        <div class=\"vjs-icon-placeholder " + (this.options_.icon || '') + "\"></div>\n        <div>" + this.localize(options.label) + "</div>\n        <div class=\"vjs-spacer\"></div>\n        <div>\n          <div class=\"vjs-onoff-button\"></div>\n        </div>\n      "
    });
    return el;
  };

  _proto.update = function update(active) {
    this.active = typeof active === 'undefined' ? !this.active : active;

    if (this.active) {
      this.addClass('vjs-active');
    } else {
      this.removeClass('vjs-active');
    }
  };

  _proto.handleClick = function handleClick() {
    this.update();
  };

  _proto.selected = function selected() {};

  return SettingOnOffItem;
}(SettingMenuItem);

video_js.registerComponent('SettingOnOffItem', SettingOnOffItem);

var SettingSubOptionTitle =
/*#__PURE__*/
function (_SettingMenuItem) {
  _inheritsLoose(SettingSubOptionTitle, _SettingMenuItem);

  function SettingSubOptionTitle(player, options) {
    var _this;

    _this = _SettingMenuItem.call(this, player, options) || this;

    _this.addChild('Component', {}, 0);

    _this.addClass('vjs-settings-sub-menu-item');

    _this.addClass('vjs-settings-sub-menu-title');

    return _this;
  }

  var _proto = SettingSubOptionTitle.prototype;

  _proto.handleClick = function handleClick() {
    this.options_.menu.restore();
  };

  return SettingSubOptionTitle;
}(SettingMenuItem);

video_js.registerComponent('SettingSubOptionTitle', SettingSubOptionTitle);

var SettingSubOptionItem =
/*#__PURE__*/
function (_SettingMenuItem) {
  _inheritsLoose(SettingSubOptionItem, _SettingMenuItem);

  function SettingSubOptionItem(player, options) {
    var _this;

    _this = _SettingMenuItem.call(this, player, options) || this;
    _this.selectable = true;
    Object.assign(_assertThisInitialized(_assertThisInitialized(_this)), options);

    _this.addChild('Component', {}, 0);

    _this.addClass('vjs-settings-sub-menu-item');

    _this.addClass('vjs-settings-sub-menu-option');

    _this.update();

    return _this;
  }

  var _proto = SettingSubOptionItem.prototype;

  _proto.update = function update() {
    this.selected(this.value === this.parent.selected.value);
  };

  _proto.handleClick = function handleClick() {
    this.parent.update(this);
    this.restore();
  };

  _proto.restore = function restore() {
    this.menu.restore();
  };

  return SettingSubOptionItem;
}(SettingMenuItem);

video_js.registerComponent('SettingSubOptionItem', SettingSubOptionItem);

var SettingMenu$1 = video_js.getComponent('SettingMenu');

var SettingMenuTemp =
/*#__PURE__*/
function (_SettingMenu) {
  _inheritsLoose(SettingMenuTemp, _SettingMenu);

  function SettingMenuTemp(player) {
    return _SettingMenu.call(this, player, {
      name: 'SettingMenuTemp'
    }) || this;
  }

  return SettingMenuTemp;
}(SettingMenu$1);

var getMenuDimension = function getMenuDimension(player, items) {
  var tempMenu = new SettingMenuTemp(player);
  tempMenu.update(items);
  player.addChild(tempMenu);
  var rect = tempMenu.contentEl_.getBoundingClientRect(); // remove subMenuItem form tempMenu first, otherwise they will also be disposed

  tempMenu.update();
  tempMenu.dispose(); // remove tempMenu in `player.children`

  player.removeChild(tempMenu);
  return rect;
};

/**
 * @param {Array<Object|number|string>} entries
 */

function parseEntries(entries) {
  var selected;
  entries = entries.map(function (data, index) {
    if (data !== null && typeof data !== 'object') {
      data = {
        value: data,
        label: data
      };
    }

    var isDefault = typeof data.defalut !== 'undefined' ? data.defalut : false;

    var entry = _extends({}, data, {
      index: index,
      defalut: isDefault
    });

    if (isDefault) {
      selected = entry;
    }

    return entry;
  });

  if (!selected) {
    selected = entries[0];
  }

  return {
    entries: entries,
    selected: selected
  };
}

var SettingOptionItem =
/*#__PURE__*/
function (_SettingMenuItem) {
  _inheritsLoose(SettingOptionItem, _SettingMenuItem);

  function SettingOptionItem(player, options) {
    var _this;

    if (options === void 0) {
      options = {};
    }

    _this = _SettingMenuItem.call(this, player, options) || this;

    _this.setEntries(_this.options_.entries);

    if (!_this.entries.length) {
      _this.hide();
    }

    return _this;
  }

  var _proto = SettingOptionItem.prototype;

  _proto.createEl = function createEl() {
    var _this$options_ = this.options_,
        icon = _this$options_.icon,
        label = _this$options_.label;
    var el = video_js.dom.createEl('li', {
      className: 'vjs-menu-item vjs-setting-menu-item',
      innerHTML: "\n        <div class=\"vjs-icon-placeholder " + (icon || '') + "\"></div>\n        <div class=\"vjs-setting-menu-label\">" + this.localize(label) + "</div>\n        <div class=\"vjs-spacer\"></div>\n      "
    });
    this.selectedValueEl = video_js.dom.createEl('div', {
      className: 'vjs-setting-menu-value'
    });
    el.appendChild(this.selectedValueEl);
    return el;
  };

  _proto.setEntries = function setEntries(entries_) {
    var _this2 = this;

    if (entries_ === void 0) {
      entries_ = [];
    }

    Object.assign(this, parseEntries(entries_));
    this.updateSelectedValue();
    var SubOptionItem = video_js.getComponent(this.name_ + "Child") || SettingSubOptionItem;
    this.subMenuItems = this.entries.map(function (_ref) {
      var label = _ref.label,
          value = _ref.value;
      return new SubOptionItem(_this2.player_, {
        label: label,
        value: value,
        parent: _this2,
        menu: _this2.menu
      });
    });
    this.subMenuItems.splice(0, 0, new SettingSubOptionTitle(this.player_, {
      label: this.options_.label,
      menu: this.menu
    }));
  };

  _proto.handleClick = function handleClick() {
    var dimensions = getMenuDimension(this.player_, this.subMenuItems);
    this.menu.update(this.subMenuItems);
    this.menu.resize(dimensions);
  };

  _proto.update = function update(_ref2) {
    var label = _ref2.label,
        value = _ref2.value;
    this.selected = {
      label: label,
      value: value
    };
    this.updateSelectedValue();
    this.subMenuItems.forEach(function (item) {
      item.update && item.update();
    });
  };

  _proto.updateSelectedValue = function updateSelectedValue() {
    if (this.selected) {
      this.selectedValueEl.innerHTML = this.localize(this.selected.label);
    }
  };

  _proto.show = function show() {
    _SettingMenuItem.prototype.show.call(this);

    this.menu.reset();
  };

  return SettingOptionItem;
}(SettingMenuItem);

video_js.registerComponent('SettingOptionItem', SettingOptionItem);

var PlaybackRateSettingItem =
/*#__PURE__*/
function (_SettingOptionItem) {
  _inheritsLoose(PlaybackRateSettingItem, _SettingOptionItem);

  function PlaybackRateSettingItem(player, options) {
    var _this;

    _this = _SettingOptionItem.call(this, player, _extends({}, options, {
      label: 'Speed',
      icon: 'vjs-icon-slow-motion-video',
      entries: [0.5, 0.75, {
        label: 'Normal',
        value: 1,
        defalut: true
      }, 1.25, 1.5, 2]
    })) || this;

    _this.addClass('vjs-setting-playback-rate'); // Since playback rate will be reset to noraml when video source changed
    // So we need to listen on `ratechange`


    player.on('ratechange', function () {
      var rate = player.playbackRate();

      var currentEntry = _this.entries.find(function (_ref) {
        var value = _ref.value;
        return rate === value;
      });

      _this.update(currentEntry);
    });
    return _this;
  }

  var _proto = PlaybackRateSettingItem.prototype;

  _proto.update = function update(entry) {
    _SettingOptionItem.prototype.update.call(this, entry);

    if (this.player_.playbackRate() !== entry.value) {
      this.player_.playbackRate(entry.value);
    }
  };

  return PlaybackRateSettingItem;
}(SettingOptionItem);

video_js.registerComponent('PlaybackRateSettingItem', PlaybackRateSettingItem);

var MenuButton = video_js.getComponent('MenuButton');

var SettingMenuButton =
/*#__PURE__*/
function (_MenuButton) {
  _inheritsLoose(SettingMenuButton, _MenuButton);

  function SettingMenuButton(player, options) {
    var _this;

    _this = _MenuButton.call(this, player, options) || this; // move menu to player

    player.addChild(_this.menu); // remove videojs parent child relationship between button and menu

    _this.removeChild(_this.menu);

    player.on('playerresize', function () {
      _this.menu.reset();
    });
    return _this;
  }

  var _proto = SettingMenuButton.prototype;

  _proto.buildCSSClass = function buildCSSClass() {
    return "vjs-setting-button " + _MenuButton.prototype.buildCSSClass.call(this);
  };

  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return "vjs-setting-button " + _MenuButton.prototype.buildWrapperCSSClass.call(this);
  };

  _proto.createMenu = function createMenu() {
    var menu = new SettingMenu(this.player_, {
      menuButton: this
    });
    var entries = this.options_.entries || [];
    entries.forEach(function (component) {
      menu.addChild(component, {
        menu: menu
      });
    });
    return menu;
  };

  _proto.hideMenu = function hideMenu() {
    this.unpressButton();
    this.el_.blur();
  };

  _proto.unpressButton = function unpressButton() {
    _MenuButton.prototype.unpressButton.call(this);

    this.player_.removeClass('vjs-keep-control-showing');
    this.menu.restore();
  };

  _proto.handleClick = function handleClick() {
    var _this2 = this;

    this.player_.addClass('vjs-keep-control-showing');

    if (this.buttonPressed_) {
      this.unpressButton();
    } else {
      this.pressButton();
    }

    this.off(document.body, 'click', this.hideMenu);
    this.off(document.body, 'touchend', this.hideMenu);
    setTimeout(function () {
      _this2.one(document.body, 'click', _this2.hideMenu); // _this.buttonPressed_ && _this.one(document.body, 'touchend', _this.hideMenu);

    }, 0);
  };

  return SettingMenuButton;
}(MenuButton);

SettingMenuButton.prototype.controlText_ = 'Settings';
SettingMenuButton.prototype.options_ = {
  entries: ['PlaybackRateSettingItem']
};
video_js.registerComponent('SettingMenuButton', SettingMenuButton);
